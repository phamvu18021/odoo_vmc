import os
from typing import Annotated
from fastapi import APIRouter, Depends, HTTPException, Request, BackgroundTasks
from fastapi.security import HTTPBearer, HTTPAuthorizationCredentials
from typing import List, Optional, Dict, Union
import requests

from .user import decode_jwt_token
from odoo.api import Environment
from ..schemas.order import OrderItem, CreateOrderResponse, CreateOrderRequest, ApplyPromotionRequest, \
    ApplyPromoCodeRequest, OrderData, OrderUpdateRequest, UpdateOrderStatusRequest, APIResponse, \
    PromotionItem, PaymentConfirmationData, OrderStatusData
from ...fastapi.dependencies import odoo_env
from dotenv import load_dotenv

router = APIRouter()

load_dotenv()
ODOO_SECRET = os.getenv('TOKEN')

auth_scheme = HTTPBearer()
ALLOWED_STATUS_TRANSITIONS = {
    "draft": ["sale"],
    "sale": ["done", "cancel"]
}


def get_auth_token(credentials: HTTPAuthorizationCredentials = Depends(auth_scheme)):
    return credentials.credentials  # Ch·ªâ l·∫•y token thay v√¨ object HTTPAuthorizationCredentials


@router.post("/create_order", response_model=APIResponse)
def create_order(
        data: CreateOrderRequest,
        env: Annotated[Environment, Depends(odoo_env)],
        token: Optional[str] = Depends(get_auth_token)  # D√πng h√†m t·ª± vi·∫øt thay v√¨ `auth_scheme`
):
    if not token or token != ODOO_SECRET:
        raise HTTPException(
            status_code=403,
            detail=APIResponse(success=False, message="M√£ b·∫£o m·∫≠t kh√¥ng ƒëuÃÅng").model_dump()
        )

    try:
        # 1Ô∏è‚É£ T√¨m ho·∫∑c t·∫°o kh√°ch h√†ng
        partner = env["res.partner"].sudo().search([("email", "=", data.partner_email)], limit=1)
        if not partner:
            partner = env["res.partner"].sudo().create({
                "name": data.partner_name,
                "phone": data.partner_phone,
                "email": data.partner_email,
            })

        # üîπ T·∫°o ƒë∆°n h√†ng trong Odoo
        order = env["sale.order"].sudo().create({
            "partner_id": partner.id,
            "amount_total": 0,
            "state": "draft",
        })

        # üîπ Th√™m s·∫£n ph·∫©m v√†o ƒë∆°n h√†ng
        for item in data.items:
            env["sale.order.line"].sudo().create({
                "order_id": order.id,
                "product_id": item.product_id,
                "product_uom_qty": item.quantity,
                "price_unit": item.price_unit,
                "name": env["product.template"].browse(item.product_id).name,
            })
            item.name = env["product.template"].browse(item.product_id).name

        return APIResponse(
            success=True,
            message="Th√™m ƒë∆°n h√†ng th√†nh c√¥ng",
            data=OrderData(
                order_id=order.id,
                partner_name=partner.name,
                partner_phone=partner.phone,
                partner_email=partner.email,
                items=data.items,
                total_price=order.amount_total,
            )
        )

    except Exception as e:
        raise HTTPException(
            status_code=500,
            detail=APIResponse(success=False, message=f"L·ªói h·ªá th·ªëng: {str(e)}").model_dump()
        )


@router.get("/order/{order_id}", response_model=APIResponse)
def get_order_details(
        order_id: int,
        env: Annotated[Environment, Depends(odoo_env)],
        token: Optional[str] = Depends(get_auth_token)  # D√πng h√†m t·ª± vi·∫øt thay v√¨ `auth_scheme`
):
    if not token or token != ODOO_SECRET:
        raise HTTPException(
            status_code=403,
            detail=APIResponse(success=False, message="M√£ b·∫£o m·∫≠t kh√¥ng ƒëuÃÅng").model_dump()
        )

    try:
        # üîπ L·∫•y ƒë∆°n h√†ng
        order = env["sale.order"].sudo().browse(order_id)
        print(type(order_id), order_id)
        if not order.exists():
            return APIResponse(success=False, message="Order not found")

        # üîπ L·∫•y th√¥ng tin ch∆∞∆°ng tr√¨nh khuy·∫øn m√£i (n·∫øu c√≥)
        reward_line = next((line for line in order.order_line if hasattr(line, "reward_id") and line.reward_id), None)
        reward = reward_line.reward_id if reward_line else None

        # üîπ Chu·∫©n b·ªã d·ªØ li·ªáu ƒë∆°n h√†ng
        order_data = OrderData(
            order_id=order.id,
            order_name=order.name,
            partner_name=order.partner_id.name,
            partner_email=order.partner_id.email,
            partner_phone=order.partner_id.phone or order.partner_id.mobile,
            items=[
                OrderItem(
                    product_id=line.product_id.id,
                    quantity=line.product_uom_qty,
                    price_unit=line.price_unit,
                    name=line.name,
                    is_reward_line=any([line.is_reward_line, line.discount > 0, line.price_unit == 0])
                ) for line in order.order_line
            ],
            reward=PromotionItem(
                promotion_id=reward.program_id.id,
                name=reward.program_id.name,
                reward_id=reward.id,
                reward_description=reward.description,
                discount=reward.discount,
                reward_conditions=reward.conditions_description if reward.conditions_description else None,
                reward_product_name=reward.reward_product_id.name if reward.reward_product_id else None,
                reward_product_price=reward.reward_product_id.list_price
                if reward.reward_product_id else None,
                program_type=reward.program_id.program_type,
                coupon_code=reward.program_id.rule_ids[0].code if reward.program_id.rule_ids else None,
                reward_type=reward.reward_type,
            ) if reward else None,
            total_price=order.amount_total,
            create_time=order.create_date.strftime("%Y-%m-%d %H:%M:%S"),
            update_recent=order.write_date.strftime("%Y-%m-%d %H:%M:%S") if order.write_date else None,
            status=order.state
        )

        return APIResponse(
            success=True,
            message="L·∫•y th√¥ng tin ƒë∆°n h√†ng th√†nh c√¥ng",
            data=order_data
        )

    except Exception as e:
        return APIResponse(success=False, message=f"L·ªói h·ªá th·ªëng: {str(e)}")


@router.get("/promotions/{order_id}", response_model=APIResponse)
def get_claimable_promotions(
        order_id: int,
        env: Annotated[Environment, Depends(odoo_env)],
        token: Optional[str] = Depends(get_auth_token)  # D√πng h√†m t·ª± vi·∫øt thay v√¨ `auth_scheme`
):
    if not token or token != ODOO_SECRET:
        raise HTTPException(
            status_code=403,
            detail=APIResponse(success=False, message="M√£ b·∫£o m·∫≠t kh√¥ng ƒëuÃÅng").model_dump()
        )

    try:
        # üîπ L·∫•y ƒë∆°n h√†ng
        order = env["sale.order"].sudo().browse(int(order_id))

        if not order.exists():
            return APIResponse(success=False, message="Order not found")

        # üîπ K√≠ch ho·∫°t t√≠nh nƒÉng khuy·∫øn m√£i
        order.sudo()._update_programs_and_rewards()
        claimable_rewards = order._get_claimable_rewards()

        if not claimable_rewards:
            return APIResponse(
                success=True,
                message="Kh√¥ng c√≥ khuy·∫øn m√£i √°p d·ª•ng",
                data=[]
            )

        # üîπ X·ª≠ l√Ω d·ªØ li·ªáu khuy·∫øn m√£i
        promotions = []

        for coupon, rewards in claimable_rewards.items():
            for reward in rewards:
                promo_data = PromotionItem(
                    promotion_id=reward.program_id.id,
                    name=reward.program_id.name,
                    reward_id=reward.id,
                    reward_description=reward.description,
                    discount=reward.discount,
                    reward_conditions=reward.conditions_description,
                    reward_product_name=reward.reward_product_id.name if reward.reward_product_id else None,
                    reward_product_price=reward.reward_product_id.list_price if reward.reward_product_id else None,
                    program_type=reward.program_id.program_type,
                    coupon_code=reward.program_id.rule_ids[0].code if reward.program_id.rule_ids else None,
                    reward_type=reward.reward_type
                )

                promotions.append(promo_data)

        return APIResponse(
            success=True,
            message="L·∫•y danh s√°ch khuy·∫øn m√£i th√†nh c√¥ng",
            data=promotions
        )

    except Exception as e:
        return APIResponse(success=False, message=f"L·ªói h·ªá th·ªëng: {str(e)}")


@router.put("/apply_promotion", response_model=APIResponse)
def apply_promotion(
        data: ApplyPromotionRequest,
        env: Annotated[Environment, Depends(odoo_env)],
        token: Optional[str] = Depends(get_auth_token)  # D√πng h√†m t·ª± vi·∫øt thay v√¨ `auth_scheme`
):
    if not token or token != ODOO_SECRET:
        raise HTTPException(
            status_code=403,
            detail=APIResponse(success=False, message="M√£ b·∫£o m·∫≠t kh√¥ng ƒëuÃÅng").model_dump()
        )

    try:
        # üîπ L·∫•y ƒë∆°n h√†ng
        order = env["sale.order"].sudo().browse(int(data.order_id))

        if not order.exists():
            return APIResponse(success=False, message="Order not found")

        # üîπ X√≥a ch∆∞∆°ng tr√¨nh c≈© tr∆∞·ªõc khi √°p d·ª•ng m·ªõi
        order._remove_promotion_lines()

        order.sudo()._update_programs_and_rewards()
        claimable_rewards = order._get_claimable_rewards()

        selected_reward = None
        selected_coupon = None

        for coupon, rewards in claimable_rewards.items():
            for reward in rewards:
                if reward.program_id.id == data.promotion_id:
                    selected_reward = reward
                    selected_coupon = coupon
                    break
            if selected_reward:
                break

        if not selected_reward:
            return APIResponse(success=False, message="Kh√¥ng t√¨m th·∫•y ph·∫ßn th∆∞·ªüng ph√π h·ª£p sau khi √°p d·ª•ng.")

        # üîπ √Åp d·ª•ng ch∆∞∆°ng tr√¨nh khuy·∫øn m√£i
        order._apply_program_reward(selected_reward, selected_coupon)

        # üîπ Chu·∫©n b·ªã d·ªØ li·ªáu ƒë∆°n h√†ng sau khi √°p d·ª•ng khuy·∫øn m√£i
        order_data = OrderData(
            order_id=order.id,
            partner_name=order.partner_id.name,
            partner_email=order.partner_id.email,
            partner_phone=order.partner_id.phone or order.partner_id.mobile,
            items=[
                OrderItem(
                    product_id=line.product_id.id,
                    quantity=line.product_uom_qty,
                    price_unit=line.price_unit,
                    name=line.name,
                    is_reward_line=any([line.is_reward_line, line.discount > 0, line.price_unit == 0])
                ) for line in order.order_line
            ],
            reward=PromotionItem(
                promotion_id=selected_reward.program_id.id,
                name=selected_reward.program_id.name,
                reward_id=selected_reward.id,
                reward_description=selected_reward.description,
                discount=selected_reward.discount,
                reward_conditions=selected_reward.conditions_description if selected_reward.conditions_description else None,
                reward_product_name=selected_reward.reward_product_id.name if selected_reward.reward_product_id else None,
                reward_product_price=selected_reward.reward_product_id.list_price
                if selected_reward.reward_product_id else None,
                program_type=selected_reward.program_id.program_type,
                coupon_code=selected_reward.program_id.rule_ids[
                    0].code if selected_reward.program_id.rule_ids else None,
                reward_type=selected_reward.reward_type,
            ) if selected_reward else None,
            total_price=order.amount_total,
            create_time=order.create_date.strftime("%Y-%m-%d %H:%M:%S"),
            update_recent=order.write_date.strftime("%Y-%m-%d %H:%M:%S") if order.write_date else None,
            status=order.state
        )

        return APIResponse(
            success=True,
            message="√Åp d·ª•ng ch∆∞∆°ng tr√¨nh khuy·∫øn m√£i th√†nh c√¥ng",
            data=order_data
        )

    except Exception as e:
        return APIResponse(success=False, message=f"L·ªói h·ªá th·ªëng: {str(e)}")


@router.put("/apply_promo_code", response_model=APIResponse)
def apply_promo_code(
        data: ApplyPromoCodeRequest,
        env: Annotated[Environment, Depends(odoo_env)],
        token: Optional[str] = Depends(get_auth_token)  # D√πng h√†m t·ª± vi·∫øt thay v√¨ `auth_scheme`
):
    if not token or token != ODOO_SECRET:
        raise HTTPException(
            status_code=403,
            detail=APIResponse(success=False, message="M√£ b·∫£o m·∫≠t kh√¥ng ƒëuÃÅng").model_dump()
        )

    try:
        order = env["sale.order"].sudo().browse(int(data.order_id))

        if not order.exists():
            return APIResponse(success=False, message="Order not found")

        order.sudo()._update_programs_and_rewards()

        # üîπ Ki·ªÉm tra m√£ khuy·∫øn m√£i c√≥ trong danh s√°ch ph·∫ßn th∆∞·ªüng kh√¥ng
        claimable_rewards = order._get_claimable_rewards() or {}

        reward_found = any(
            data.promo_code == reward.program_id.rule_ids[0].code
            for rewards in claimable_rewards.values()
            for reward in rewards
            if reward.program_id.rule_ids
        )

        if not reward_found:
            # N·∫øu kh√¥ng c√≥, ti·∫øn h√†nh √°p m√£ khuy·∫øn m√£i
            order._remove_promotion_lines()
            wizard = env["sale.loyalty.coupon.wizard"].sudo().create({
                "order_id": order.id,
                "coupon_code": data.promo_code
            })
            wizard.action_apply()

        # üîπ Ki·ªÉm tra l·∫°i danh s√°ch ph·∫ßn th∆∞·ªüng sau khi √°p m√£ gi·∫£m gi√°
        updated_rewards = order._get_claimable_rewards() or {}

        selected_reward = None
        selected_coupon = None

        for coupon, rewards in updated_rewards.items():
            for reward in rewards:
                if reward.program_id.rule_ids and reward.program_id.rule_ids[0].code == data.promo_code:
                    selected_reward = reward
                    selected_coupon = coupon
                    break
            if selected_reward:
                break

        if not selected_reward:
            return APIResponse(success=False, message="Kh√¥ng t√¨m th·∫•y ph·∫ßn th∆∞·ªüng ph√π h·ª£p sau khi √°p d·ª•ng.")

        order._apply_program_reward(selected_reward, selected_coupon)

        # üîπ Chu·∫©n b·ªã d·ªØ li·ªáu ƒë∆°n h√†ng sau khi √°p d·ª•ng m√£ gi·∫£m gi√°
        order_data = OrderData(
            order_id=order.id,
            partner_name=order.partner_id.name,
            partner_email=order.partner_id.email,
            partner_phone=order.partner_id.phone or order.partner_id.mobile,
            items=[
                OrderItem(
                    product_id=line.product_id.id,
                    quantity=line.product_uom_qty,
                    price_unit=line.price_unit,
                    name=line.name,
                    is_reward_line=getattr(line, "is_reward_line", False)  # D√πng getattr ƒë·ªÉ tr√°nh l·ªói
                ) for line in order.order_line
            ],
            reward=PromotionItem(
                promotion_id=selected_reward.program_id.id,
                name=selected_reward.program_id.name,
                reward_id=selected_reward.id,
                reward_description=selected_reward.description,
                discount=selected_reward.discount,
                reward_conditions=selected_reward.conditions_description if selected_reward.conditions_description else None,
                reward_product_name=selected_reward.reward_product_id.name if selected_reward.reward_product_id else None,
                reward_product_price=selected_reward.reward_product_id.list_price
                if selected_reward.reward_product_id else None,
                program_type=selected_reward.program_id.program_type,
                coupon_code=selected_reward.program_id.rule_ids[
                    0].code if selected_reward.program_id.rule_ids else None,
                reward_type=selected_reward.reward_type,
            ) if selected_reward else None,
            total_price=order.amount_total,
            create_time=order.create_date.strftime("%Y-%m-%d %H:%M:%S"),
            update_recent=order.write_date.strftime("%Y-%m-%d %H:%M:%S") if order.write_date else None,
            status=order.state
        )

        return APIResponse(
            success=True,
            message="√Åp d·ª•ng m√£ khuy·∫øn m√£i th√†nh c√¥ng",
            data=order_data
        )

    except Exception as e:
        return APIResponse(success=False, message=f"L·ªói h·ªá th·ªëng: {str(e)}")


@router.put("/order", response_model=APIResponse)
def update_order(
        data: OrderUpdateRequest,
        env: Annotated[Environment, Depends(odoo_env)],
        token: Optional[str] = Depends(get_auth_token)  # D√πng h√†m t·ª± vi·∫øt thay v√¨ `auth_scheme`
):
    if not token or token != ODOO_SECRET:
        raise HTTPException(
            status_code=403,
            detail=APIResponse(success=False, message="M√£ b·∫£o m·∫≠t kh√¥ng ƒëuÃÅng").model_dump()
        )

    try:
        # üîπ T√¨m ho·∫∑c t·∫°o kh√°ch h√†ng theo email
        partner = env["res.partner"].sudo().search([("email", "=", data.partner_email)], limit=1)

        if partner:
            # C·∫≠p nh·∫≠t th√¥ng tin kh√°ch h√†ng n·∫øu ƒë√£ t·ªìn t·∫°i
            partner.sudo().write({
                "name": data.partner_name,
                "phone": data.partner_phone,
            })
        else:
            # T·∫°o m·ªõi kh√°ch h√†ng
            partner = env["res.partner"].sudo().create({
                "name": data.partner_name,
                "email": data.partner_email,
                "phone": data.partner_phone,
                "customer_rank": 1  # X√°c ƒë·ªãnh l√† kh√°ch h√†ng
            })

        # üîπ T√¨m ƒë∆°n h√†ng theo order_id_ee
        order = env["sale.order"].sudo().browse(int(data.order_id))

        # G√°n kh√°ch h√†ng v√†o ƒë∆°n h√†ng
        order.sudo().write({"partner_id": partner.id})
        if data.items is not None:
            # X√≥a t·∫•t c·∫£ s·∫£n ph·∫©m hi·ªán t·∫°i trong ƒë∆°n h√†ng
            order.order_line.sudo().unlink()

            # Th√™m s·∫£n ph·∫©m m·ªõi v√†o ƒë∆°n h√†ng
            new_order_lines = [(0, 0, {
                "product_id": item.product_id,
                "product_uom_qty": item.quantity,
                "price_unit": item.price_unit
            }) for item in data.items]

            order.sudo().write({"order_line": new_order_lines})

        # L·∫•y l·∫°i th√¥ng tin ƒë∆°n h√†ng sau khi c·∫≠p nh·∫≠t
        order = env["sale.order"].sudo().browse(order.id)

        order_data = OrderData(
            order_id=order.id,
            partner_name=order.partner_id.name,
            partner_email=order.partner_id.email,
            partner_phone=order.partner_id.phone or order.partner_id.mobile,
            items=[
                OrderItem(
                    product_id=line.product_id.id,
                    quantity=line.product_uom_qty,
                    price_unit=line.price_unit,
                    name=line.name,
                    is_reward_line=False
                ) for line in order.order_line
            ],
            total_price=order.amount_total,
            create_time=order.create_date.strftime("%Y-%m-%d %H:%M:%S"),
            update_recent=order.write_date.strftime("%Y-%m-%d %H:%M:%S") if order.write_date else None,
            status=order.state
        )

        return APIResponse(
            success=True,
            message="C·∫≠p nh·∫≠t ƒë∆°n h√†ng th√†nh c√¥ng",
            data=order_data
        )

    except Exception as e:
        return APIResponse(success=False, message=f"L·ªói h·ªá th·ªëng: {str(e)}")


@router.put("/payment-confirmation/{order_id}", response_model=APIResponse)
def confirm_payment(
        order_id: int,
        env: Annotated[Environment, Depends(odoo_env)],
        token: Optional[str] = Depends(get_auth_token)  # D√πng h√†m t·ª± vi·∫øt thay v√¨ `auth_scheme`
):
    if not token or token != ODOO_SECRET:
        raise HTTPException(
            status_code=403,
            detail=APIResponse(success=False, message="M√£ b·∫£o m·∫≠t kh√¥ng ƒëuÃÅng").model_dump()
        )

    try:
        # üîπ T√¨m ƒë∆°n h√†ng theo order_id
        order = env["sale.order"].sudo().browse(int(order_id))

        if not order:
            return APIResponse(success=False, message="Order not found")

        # N·∫øu ch∆∞a x√°c nh·∫≠n thanh to√°n, c·∫≠p nh·∫≠t th√†nh `True`
        if not order.customer_payment_confirmed:
            order.sudo().write({"customer_payment_confirmed": True})

        payment_data = PaymentConfirmationData(
            order_id=order.id,
            customer_payment_confirmed=order.customer_payment_confirmed
        )

        return APIResponse(
            success=True,
            message="X√°c nh·∫≠n thanh to√°n th√†nh c√¥ng",
            data=payment_data
        )

    except Exception as e:
        return APIResponse(success=False, message=f"L·ªói h·ªá th·ªëng: {str(e)}")


def sync_order_data(order):
    # sync_url = "https://webhook.site/5d04b972-d6ae-4a53-a4e6-78866b5a532a"
    sync_url = "https://sam.aumpilot.com/c1/api/saleOrders"
    headers = {"Content-Type": "application/json",
               "api-key": "1"
               }

    sync_data = {
        "partner_info": {
            "name": order.partner_id.name if order.partner_id else "",
            "phone": order.partner_id.phone if order.partner_id else "",
            "email": order.partner_id.email if order.partner_id else "",
        },
        "name": order.name,
        "th_order_ecm_id": order.id,
        "th_utm_source": "vstep",
        "ecm_type": "vstep",
        "date_order": order.date_order.strftime("%Y-%m-%dT%H:%M:%S"),
        "amount_total": order.amount_total,
        "th_status": "draft",
        "state": order.state,
        "th_sale_order": "apm",
        "order_lines": [
            {
                "product_uom_qty": line.product_uom_qty,
                "discount": line.discount if line.discount else 0,
                "product_id": int(line.product_id.product_id_sam) if line.product_id.product_id_sam else 0,
                "price_unit": line.price_unit,
                "is_reward_line": any([line.is_reward_line, line.discount > 0, line.price_unit == 0]),
                **({"reward_id_sam": line.reward_id.reward_id_sam} if any(
                    [line.is_reward_line, line.discount > 0, line.price_unit == 0]) else {})
            }
            for line in order.order_line
        ],
    }

    try:
        response = requests.post(sync_url, json=sync_data, headers=headers, timeout=40)
        response.raise_for_status()
        print(f"ƒê·ªìng b·ªô thaÃÄnh c√¥ng ƒë∆°n h√†ng {order.id}")
    except requests.exceptions.RequestException as e:
        print(f"[SYNC ERROR] Kh√¥ng th·ªÉ ƒë·ªìng b·ªô ƒë∆°n h√†ng {order.id}: {str(e)}")


@router.put("/update-order-status/{order_id}", response_model=APIResponse)
def update_order_status(
        order_id: int,
        data: UpdateOrderStatusRequest,
        background_tasks: BackgroundTasks,
        env: Annotated[Environment, Depends(odoo_env)],
        token: str = Depends(get_auth_token)  # D√πng h√†m t·ª± vi·∫øt thay v√¨ `auth_scheme`
):
    if token != ODOO_SECRET:
        raise HTTPException(
            status_code=403,
            detail=APIResponse(success=False, message="M√£ b·∫£o m·∫≠t kh√¥ng ƒëuÃÅng").model_dump()
        )

    try:
        # üîπ T√¨m ƒë∆°n h√†ng theo order_id
        order = env["sale.order"].sudo().browse(int(order_id))

        if not order:
            return APIResponse(success=False, message="Order not found")
        if data.status not in ALLOWED_STATUS_TRANSITIONS.get(order.state, []):
            raise HTTPException(
                status_code=400,
                detail=APIResponse(success=False,
                                   message=f"Kh√¥ng th·ªÉ chuy·ªÉn tr·∫°ng th√°i t·ª´ '{order.state}' sang '{data.status}'").model_dump()
            )
        # üîπ C·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë∆°n h√†ng
        order.sudo().write({"state": data.status})
        if order.state == "sale" and data.status == "sale":
            background_tasks.add_task(sync_order_data, order)
        order_status_data = OrderStatusData(
            order_id=order.id,
            status=order.state
        )

        return APIResponse(
            success=True,
            message="C·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë∆°n h√†ng th√†nh c√¥ng",
            data=order_status_data
        )

    except Exception as e:
        return APIResponse(success=False, message=f"L·ªói h·ªá th·ªëng: {str(e)}")


@router.get("/orders_history", response_model=APIResponse)
async def get_user_orders(
        env: Annotated[Environment, Depends(odoo_env)],
        credentials: HTTPAuthorizationCredentials = Depends(auth_scheme)
):
    token_data = decode_jwt_token(credentials.credentials)

    try:
        # L·∫•y partner t·ª´ token
        partner = env['res.partner'].sudo().browse(token_data["id"])
        if not partner.exists():
            return APIResponse(success=False, message="Kh√¥ng t√¨m th·∫•y t√†i kho·∫£n")

        # Truy v·∫•n c√°c ƒë∆°n h√†ng c√≥ tr·∫°ng th√°i h·ª£p l·ªá
        valid_states = ["sale", "done", "cancel"]
        orders = env["sale.order"].sudo().search([
            ("partner_id", "=", partner.id),
            ("state", "in", valid_states)
        ])

        # Chu·∫©n b·ªã danh s√°ch ƒë∆°n h√†ng
        order_list = []
        for order in orders:
            # L·∫•y th√¥ng tin ch∆∞∆°ng tr√¨nh khuy·∫øn m√£i (n·∫øu c√≥)
            reward_line = next((line for line in order.order_line if hasattr(line, "reward_id") and line.reward_id),
                               None)
            reward = reward_line.reward_id if reward_line else None

            order_data = OrderData(
                order_id=order.id,
                order_name=order.name,
                partner_name=order.partner_id.name,
                partner_email=order.partner_id.email,
                partner_phone=order.partner_id.phone or order.partner_id.mobile,
                items=[
                    OrderItem(
                        product_id=line.product_id.id,
                        quantity=line.product_uom_qty,
                        price_unit=line.price_unit,
                        name=line.name,
                        is_reward_line=any([line.is_reward_line, line.discount > 0, line.price_unit == 0])
                    ) for line in order.order_line
                ],
                reward=PromotionItem(
                    promotion_id=reward.program_id.id,
                    name=reward.program_id.name,
                    reward_id=reward.id,
                    reward_description=reward.description,
                    discount=reward.discount,
                    reward_conditions=reward.conditions_description if reward.conditions_description else None,
                    reward_product_name=reward.reward_product_id.name if reward.reward_product_id else None,
                    reward_product_price=reward.reward_product_id.list_price if reward.reward_product_id else None,
                    program_type=reward.program_id.program_type,
                    coupon_code=reward.program_id.rule_ids[0].code if reward.program_id.rule_ids else None,
                    reward_type=reward.reward_type,
                ) if reward else None,
                total_price=order.amount_total,
                create_time=order.create_date.strftime("%Y-%m-%d %H:%M:%S"),
                update_recent=order.write_date.strftime("%Y-%m-%d %H:%M:%S") if order.write_date else None,
                status=order.state
            )
            order_list.append(order_data)

        return APIResponse(
            success=True,
            message="L·∫•y danh s√°ch ƒë∆°n h√†ng th√†nh c√¥ng",
            data=order_list
        )

    except Exception as e:
        return APIResponse(success=False, message=f"L·ªói h·ªá th·ªëng: {str(e)}")
